#!/usr/bin/env python

import argparse, sys
from argparse import RawTextHelpFormatter

__author__ = "Colby Chiang (cc2qe@virginia.edu)"
__version__ = "$Revision: 0.0.1 $"
__date__ = "$Date: 2014-02-02 15:44 $"

# --------------------------------------
# define functions

def get_args():
    parser = argparse.ArgumentParser(formatter_class=RawTextHelpFormatter, description="\
flattenbed\n\
author: " + __author__ + "\n\
version: " + __version__ + "\n\
description: Basic python script template")
    #parser.add_argument('-a', '--argA', metavar='argA', type=str, required=True, help='description of argument')
    #parser.add_argument('-b', '--argB', metavar='argB', required=False, help='description of argument B')
    #parser.add_argument('-c', '--flagC', required=False, action='store_true', help='sets flagC to true')
    parser.add_argument('-d', '--distance', required=True, type=int, help='maximum distance between two BED entries that may be merged')
    parser.add_argument('-c', '--col', required=False, type=int, default=4, help='column (1-based) that must be equal in all merged BED entries (default: 4)')
    parser.add_argument('file', nargs='?', type=argparse.FileType('r'), default=None, help='BED file to read. If \'-\' or absent then defaults to stdin.')

    # parse the arguments
    args = parser.parse_args()

    # if no input, check if part of pipe and if so, read stdin.
    if args.file == None:
        if sys.stdin.isatty():
            parser.print_help()
            exit(1)
        else:
            args.file = sys.stdin

    # send back the user input
    return args

class BedRecord (object):
    """
    __very__ basic class for bedgraph coverage file.
    """
    def __init__(self, bedList = []):
        if len(bedList) > 0:
            self.chrom  = bedList[0]
            self.pos1   = int(bedList[1])
            self.pos2   = int(bedList[2])
            if len(bedList) > 3:
                self.attr  = bedList[3:]
            self.valid  = 1
        else:
            self.valid = 0
            self.query = 'null'

# primary function
def flattenbed(f, dist, argcol):
    merged = BedRecord(['null', -1, -1])
    c = argcol - 4
    for line in f:
        bed = BedRecord(line.rstrip().split('\t'))
        if merged.pos1 < 0:
            merged = bed

        elif bed.pos1 - merged.pos2 < dist and bed.attr[c] == merged.attr[c] and bed.chrom == merged.chrom:
            merged.pos2 = bed.pos2
        else:
            #print bed.pos1 - merged.pos2
            print '\t'.join(map(str, [merged.chrom, merged.pos1, merged.pos2, merged.attr[c]]))
            merged = bed
    
    # print the last merged
    print '\t'.join(map(str, [merged.chrom, merged.pos1, merged.pos2, merged.attr[c]]))

    return

# --------------------------------------
# main function

def main():
    # parse the command line args
    args = get_args()

    # call primary function
    flattenbed(args.file, args.distance, args.col)

    # close the input file
    args.file.close()

# initialize the script
if __name__ == '__main__':
    sys.exit(main())
